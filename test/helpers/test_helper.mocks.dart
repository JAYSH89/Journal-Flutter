// Mocks generated by Mockito 5.4.4 from annotations
// in journal/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:journal/food/data/datasource/food_data_source.dart' as _i4;
import 'package:journal/food/domain/models/food.dart' as _i2;
import 'package:journal/food/domain/repository/food_repository.dart' as _i6;
import 'package:journal/profile/data/datasource/weight_measurement_data_source.dart'
    as _i5;
import 'package:journal/profile/domain/models/weight_measurement.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFood_0 extends _i1.SmartFake implements _i2.Food {
  _FakeFood_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeightMeasurement_1 extends _i1.SmartFake
    implements _i3.WeightMeasurement {
  _FakeWeightMeasurement_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FoodDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodDataSource extends _i1.Mock implements _i4.FoodDataSource {
  MockFoodDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Food> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i2.Food>[],
      ) as List<_i2.Food>);

  @override
  _i2.Food? getFoodById(String? id) => (super.noSuchMethod(Invocation.method(
        #getFoodById,
        [id],
      )) as _i2.Food?);

  @override
  List<_i2.Food> searchFoodByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #searchFoodByName,
          [name],
        ),
        returnValue: <_i2.Food>[],
      ) as List<_i2.Food>);

  @override
  _i2.Food updateFood(
    String? id,
    _i2.Food? food,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFood,
          [
            id,
            food,
          ],
        ),
        returnValue: _FakeFood_0(
          this,
          Invocation.method(
            #updateFood,
            [
              id,
              food,
            ],
          ),
        ),
      ) as _i2.Food);

  @override
  _i2.Food saveFood(_i2.Food? food) => (super.noSuchMethod(
        Invocation.method(
          #saveFood,
          [food],
        ),
        returnValue: _FakeFood_0(
          this,
          Invocation.method(
            #saveFood,
            [food],
          ),
        ),
      ) as _i2.Food);

  @override
  void deleteFood(String? id) => super.noSuchMethod(
        Invocation.method(
          #deleteFood,
          [id],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WeightMeasurementDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeightMeasurementDataSource extends _i1.Mock
    implements _i5.WeightMeasurementDataSource {
  MockWeightMeasurementDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.WeightMeasurement> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i3.WeightMeasurement>[],
      ) as List<_i3.WeightMeasurement>);

  @override
  _i3.WeightMeasurement save(_i3.WeightMeasurement? measurement) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [measurement],
        ),
        returnValue: _FakeWeightMeasurement_1(
          this,
          Invocation.method(
            #save,
            [measurement],
          ),
        ),
      ) as _i3.WeightMeasurement);

  @override
  dynamic delete(String? id) => super.noSuchMethod(Invocation.method(
        #delete,
        [id],
      ));
}

/// A class which mocks [FoodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodRepository extends _i1.Mock implements _i6.FoodRepository {
  MockFoodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Food> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i2.Food>[],
      ) as List<_i2.Food>);

  @override
  _i2.Food? getFoodById(String? id) => (super.noSuchMethod(Invocation.method(
        #getFoodById,
        [id],
      )) as _i2.Food?);

  @override
  List<_i2.Food> searchFoodByName(String? name) => (super.noSuchMethod(
        Invocation.method(
          #searchFoodByName,
          [name],
        ),
        returnValue: <_i2.Food>[],
      ) as List<_i2.Food>);

  @override
  _i2.Food updateFood(
    String? id,
    _i2.Food? food,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFood,
          [
            id,
            food,
          ],
        ),
        returnValue: _FakeFood_0(
          this,
          Invocation.method(
            #updateFood,
            [
              id,
              food,
            ],
          ),
        ),
      ) as _i2.Food);

  @override
  _i2.Food saveFood(_i2.Food? food) => (super.noSuchMethod(
        Invocation.method(
          #saveFood,
          [food],
        ),
        returnValue: _FakeFood_0(
          this,
          Invocation.method(
            #saveFood,
            [food],
          ),
        ),
      ) as _i2.Food);

  @override
  dynamic deleteFood(String? id) => super.noSuchMethod(Invocation.method(
        #deleteFood,
        [id],
      ));
}
